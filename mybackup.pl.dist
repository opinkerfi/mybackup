#!/usr/bin/perl
# MySQL database dump
# 
# GPLv2
# Created by: Tryggvi Farestveit <tryggvi@ok.is>

use strict;
use File::Temp qw(tempdir);
use POSIX qw(strftime);

# Where to keep backups
my $datastore = "/var/spool/mybackup";

# MySQL authentication
my $my_user = "root"; # MySQL user with permission
my $my_pass = ""; # MySQL user's password
my $my_host = "localhost"; # MySQL location
my $my_tmp = "/tmp/tmpback"; # Temp space for dump
my $now = gettime();

# Databases to exclude
my %skip;
#$skip{"test"} = 1;
#$skip{"mysql"} = 1;

# Backup retention
# - Remove backed up files after X days after successful backup
my $retention = 1; # 1 = enable / 0 = disable
my $retention_days = 5;

#####################################################
# Create temporary directory
my $my_tmp = tempdir('mybackup.XXXXXXXX', CLEANUP => 1, DIR => "/tmp");

$my_tmp = "$my_tmp/$now";
DirectoryCreate($my_tmp);

if(!-e $datastore){
	DirectoryCreate($datastore);
}

print "Using $my_tmp for dumps\n";
open(CMD, "/usr/bin/mysqlshow -u $my_user --password=$my_pass -h $my_host | awk '{print \$2}'|");
	while(<CMD>){
		chomp($_);

		if($_ ne ""){
			if($_ ne "Databases"){
				my $table = $_;
				if(!$skip{$table}){
					print "Dumping $table\n";
					system("/usr/bin/mysqldump -u $my_user --password=$my_pass -h $my_host -d $table > $my_tmp/$table-create.sql");
					system("/usr/bin/mysqldump -u $my_user --password=$my_pass -h $my_host -t $table > $my_tmp/$table-data.sql");
				} else {
					print "Skipping $table\n";
				}
			}
		}
	}
close(CMD);

system("cd $my_tmp/../; /bin/tar -cvf $datastore/myback-$now.tar $now ; /bin/gzip -9 $datastore/myback-$now.tar ; /bin/chmod 700 $datastore/myback-$now.tar.gz");

# Data retention
if(-e "$datastore/myback-$now.tar.gz" && $retention){
	# Backup was success - Will run retention
	if(!$retention_days){
		$retention_days = 365; # Will keep for 365 days unless other is defined
	}
	my $cmd = "/usr/bin/find $datastore -type f -mtime +$retention_days -exec rm -f {} \\;";
	system($cmd);
}

sub gettime(){
	return strftime "%Y-%m-%d", localtime;
}

sub DirectoryCreate(){
	my ($dir) = @_;

	if(!mkdir($dir, "700")){
		print "Error: Unable to create $dir\n";
		exit 1;
	} else {
		print "Creating $dir\n";
	}

	return 1;
}

